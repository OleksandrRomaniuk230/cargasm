{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport _ from \"lodash\";\nexport default {\n  props: {\n    placeholder: {\n      type: String,\n      default: \"\"\n    },\n    labelName: {\n      type: String,\n      default: \"label\"\n    },\n    label: {\n      type: String,\n      default: \"\"\n    },\n    reduce: {\n      type: Function,\n      default: function _default(option) {\n        return option;\n      }\n    },\n    options: {\n      type: [Array, Object],\n      required: false,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      selected: \"\",\n      items: this.options\n    };\n  },\n  methods: {\n    /*     changeValue() {\n          this.$emit(\"input\", this.selected);\n          this.$emit(\n            \"change\",\n            this.items.find((item) => item[this.reduseKey] === this.selected)\n          );\n        }, */\n\n    /*    getOptionLabel(option) {\n          if (typeof option === \"object\") {\n           if (!option.hasOwnProperty(this.labelName)) {\n             return console.warn(\n               `[vue-select warn]: Label key \"option.${this.labelName}\" does not` +\n                 ` exist in options object ${JSON.stringify(option)}.\\n` +\n                 \"http://sagalbot.github.io/vue-select/#ex-labels\"\n             );\n           }\n           return option[this.labelName];\n         }\n         return option;\n       }, */\n  },\n  watch: {\n    payload: {\n      handler: function handler(bef) {\n        this.getOption(bef);\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgUA;AACA;EACAA;IACAC;MACAC,YADA;MAEAC;IAFA,CADA;IAKAC;MACAF,YADA;MAEAC;IAFA,CALA;IAUAE;MACAH,YADA;MAEAC;IAFA,CAVA;IAcAG;MACAJ,cADA;MAEAC;QAAA;MAAA;IAFA,CAdA;IAmBAI;MACAL,qBADA;MAEAM,eAFA;MAGAL,OAHA,sBAGA;QACA;MACA;IALA;EAnBA,CADA;EA6BAM,IA7BA,kBA6BA;IACA;MACAC,YADA;MAEAC;IAFA;EAIA,CAlCA;EAmCAC;IACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EApBA,CAnCA;EA0DAC;IACAC;MACAC,OADA,mBACAC,GADA,EACA;QACA;MACA;IAHA;EADA;AA1DA","names":["props","placeholder","type","default","labelName","label","reduce","options","required","data","selected","items","methods","watch","payload","handler","bef"],"sourceRoot":"src/components/fields","sources":["AppSelect.vue"],"sourcesContent":["<template>\n  <div>\n    <vueSelect\n      v-model=\"selected\"\n      class=\"vue-select1 default__select\"\n      name=\"select1\"\n      :placeholder=\"placeholder\"\n      :options=\"items\"\n      :reduce=\"reduce\"\n      @input=\"$emit('input', selected)\"\n    >\n    </vueSelect>\n  </div><template>\n  <ValidationProvider :vid=\"inputName\" v-slot=\"{ errors }\">\n    <div class=\"input-wrapper\">\n      <div class=\"form-group\" :class=\"{ hasError: errors.length }\">\n        <label v-if=\"label\">{{ label }}</label>\n        <label\n          style=\"z-index: 1;\"\n          class=\"form-group__label\"\n          v-if=\"labelText\"\n          :class=\"{ active: isActive }\"\n          >{{ labelText }}</label\n        >\n        <v-select\n          @focus=\"isActive = true\"\n          @blur=\"selected ? (isActive = true) : (isActive = false)\"\n          v-model=\"selected\"\n          :label=\"id\"\n          :loading=\"load\"\n          :placeholder=\"placeholder\"\n          :disabled=\"disabled\"\n          :clearable=\"clearable\"\n          :max-height=\"maxHeight\"\n          :searchable=\"searchable\"\n          :taggable=\"taggable\"\n          :multiple=\"multiple\"\n          :clear-search-on-select=\"clearSearchOnSelect\"\n          :close-on-select=\"closeOnSelect\"\n          :get-option-label=\"getOptionLabel\"\n          :options=\"items\"\n          :reduce=\"reduce\"\n          @input=\"changeValue\"\n          @search=\"onSearch\"\n          :class=\"customClass\"\n        >\n          <template v-slot:selected-option=\"option\">\n            <div class=\"authors-select\">\n              <!-- <img :src=\"main_photo.min_avatar\" alt />\n              {{ name }} {{surname ? surname : ''}}-->\n              <img\n                :src=\"option.main_photo.min_avatar\"\n                v-if=\"option.main_photo\"\n              />\n              {{ option[labelName] }}\n              {{ option.surname ? option.surname : \"\" }}\n            </div>\n          </template>\n          <template v-slot:option=\"option\">\n            <div class=\"authors-select\">\n              <img\n                :src=\"option.main_photo.min_avatar\"\n                v-if=\"option.main_photo\"\n              />\n              {{ option[labelName] }}\n              <span class=\"select-count\" v-if=\"option.count\">{{\n                option.count\n              }}</span>\n              {{ option.surname ? option.surname : \"\" }}\n            </div>\n          </template>\n          <template slot=\"no-options\">{{ noOptionsMessage }}</template>\n        </v-select>\n        <template v-if=\"errors.length\">\n          <span v-for=\"(e, index) in errors\" class=\"text-danger\" :key=\"index\">{{\n            e\n          }}</span>\n        </template>\n      </div>\n      <div class=\"input-wrapper__right\" v-if=\"textInfo\">\n        <p class=\"gray-text\">{{ textInfo }}</p>\n      </div>\n    </div>\n  </ValidationProvider>\n</template>\n\n<script>\nimport _ from \"lodash\";\nexport default {\n  props: {\n    labelText: String,\n    id: {\n      type: String,\n      default: `input-${new Date().getTime()}`\n    },\n    reduseKey: {\n      type: String,\n      default: \"id\",\n      required: false\n    },\n    textInfo: {\n      type: String,\n      default: \"\"\n    },\n    value: {\n      type: [Number, String, Array, Boolean, Object],\n      default: null\n    },\n    state: {\n      type: Boolean,\n      default: false\n    },\n    e: {\n      type: String,\n      default: \"\"\n    },\n    placeholder: {\n      type: String,\n      default: \"\"\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    clearable: {\n      type: Boolean,\n      default: true\n    },\n    maxHeight: {\n      type: String,\n      default: \"400px\"\n    },\n    searchable: {\n      type: Boolean,\n      default: true\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    clearSearchOnSelect: {\n      type: Boolean,\n      default: true\n    },\n    closeOnSelect: {\n      type: Boolean,\n      default: true\n    },\n    labelName: {\n      type: String,\n      default: \"label\"\n    },\n    customClass: {\n      type: String,\n      default: \"actions-select\"\n    },\n    label: {\n      type: String,\n      default: \"\"\n    },\n    reduce: {\n      type: Function,\n      default: option => option\n    },\n    createOption: {\n      type: Function,\n      default: items => items\n    },\n    options: {\n      type: [Array, Object],\n      required: false,\n      default() {\n        return [];\n      }\n    },\n    action: {\n      type: String,\n      default: \"\"\n    },\n    actionVuex: {\n      type: String,\n      default: \"\"\n    },\n    mask: {\n      type: [String, Object, Array],\n      default: \"\"\n    },\n    selectOptions: {\n      type: String,\n      default: \"\"\n    },\n    selectProduct: {\n      type: Boolean,\n      default: false\n    },\n    taggable: {\n      type: Boolean,\n      default: false\n    },\n    inputName: {\n      type: String,\n      default: \"\"\n    },\n    autocomplite: {\n      type: Boolean,\n      default: false\n    },\n    payload: {\n      type: [Number, String, Array, Object],\n      default: null\n    }\n  },\n  data() {\n    return {\n      load: false,\n      selected: this.value,\n      isActive: this.value ? true : false,\n      items: this.options,\n      noOptionsMessage: \"Для выбора параметров введите несколько букв...\"\n    };\n  },\n  methods: {\n    changeValue() {\n      this.$emit(\"input\", this.selected);\n      this.$emit(\n        \"change\",\n        this.items.find(item => item[this.reduseKey] === this.selected)\n      );\n    },\n    async getOption(e) {\n      this.load = true;\n      let payload;\n      if (e) {\n        payload = e;\n      }\n      try {\n        let { data } = await this.$store.dispatch(this.action, payload);\n        this.items = data;\n      } catch (e) {\n        console.log(e);\n      } finally {\n        this.load = false;\n      }\n    },\n    onSearch(search, loading) {\n      if (this.action !== \"\" && this.autocomplite) {\n        loading(true);\n        this.search(loading, search, this);\n      }\n    },\n    search: _.debounce(async (loading, search, vm) => {\n      vm.$emit(\"search:val\", search);\n      let payload = { q: search };\n      if (vm.filters) {\n        payload = { q: search, f: vm.filters };\n      }\n      try {\n        let response = await vm.$store.dispatch(vm.action, {\n          q: search,\n          parent_id: vm.payload ? vm.payload.parent_id : \"\"\n        });\n        vm.items = response.data;\n        if (search) {\n          vm.noOptionsMessage = \"ничего не найдено\";\n        } else {\n          vm.noOptionsMessage =\n            \"Для выбора параметров введите несколько букв...\";\n        }\n      } catch (e) {\n        console.log(e);\n      } finally {\n        loading(false);\n      }\n    }, 350),\n    getOptionLabel(option) {\n      if (typeof option === \"object\") {\n        if (!option.hasOwnProperty(this.labelName)) {\n          return console.warn(\n            `[vue-select warn]: Label key \"option.${this.labelName}\" does not` +\n              ` exist in options object ${JSON.stringify(option)}.\\n` +\n              \"http://sagalbot.github.io/vue-select/#ex-labels\"\n          );\n        }\n        return option[this.labelName];\n      }\n      return option;\n    }\n  },\n  watch: {\n    options: {\n      handler(bef) {\n        if (!this.searchable) {\n          this.items = bef;\n        }\n      },\n      deep: true\n    },\n    value: {\n      handler(bef) {\n        this.selected = bef;\n        this.isActive = true;\n      },\n      deep: true\n    },\n    selected: {\n      handler(bef) {\n        this.changeValue();\n      }\n    },\n    payload: {\n      handler(bef) {\n        this.getOption(bef);\n      }\n    }\n  }\n};\n</script>\n\n</template>\n<script>\nimport _ from \"lodash\";\nexport default {\n  props: {\n    placeholder: {\n      type: String,\n      default: \"\",\n    },\n    labelName: {\n      type: String,\n      default: \"label\",\n    },\n\n    label: {\n      type: String,\n      default: \"\",\n    },\n    reduce: {\n      type: Function,\n      default: (option) => option,\n    },\n\n    options: {\n      type: [Array, Object],\n      required: false,\n      default() {\n        return [];\n      },\n    },\n  },\n\n  data() {\n    return {\n      selected: \"\",\n      items: this.options,\n    };\n  },\n  methods: {\n/*     changeValue() {\n      this.$emit(\"input\", this.selected);\n      this.$emit(\n        \"change\",\n        this.items.find((item) => item[this.reduseKey] === this.selected)\n      );\n    }, */\n /*    getOptionLabel(option) {\n\n      if (typeof option === \"object\") {\n        if (!option.hasOwnProperty(this.labelName)) {\n          return console.warn(\n            `[vue-select warn]: Label key \"option.${this.labelName}\" does not` +\n              ` exist in options object ${JSON.stringify(option)}.\\n` +\n              \"http://sagalbot.github.io/vue-select/#ex-labels\"\n          );\n        }\n        return option[this.labelName];\n      }\n      return option;\n    }, */\n  },\n  watch: {\n    payload: {\n      handler(bef) {\n        this.getOption(bef);\n      },\n    },\n  },\n};\n</script>"]},"metadata":{},"sourceType":"module"}